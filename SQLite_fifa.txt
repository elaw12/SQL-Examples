This project was done using this SQLite data - https://www.kaggle.com/datasets/hugomathien/soccer/code
Listed here is the SQL code, followed along with this video https://www.youtube.com/watch?v=kbKty5ZVKMY&list=PLR0triVyTrBWOLNu3ato7Y9hnGVyhTe1c&index=2
/* return all from player table */
Select 
  * 
FROM 
  Player ;

/* return player_name and birthday from the table player */
SELECT
  player_name, birthday
FROM
  Player ;

/* return player_name - rename as name - and birthday from the table player */
SELECT
  player_name as name, birthday
FROM
  Player ;

/* return player_name - rename as full name - and birthday from the table player */
SELECT
  player_name as 'full name', birthday
FROM
  Player ;

/* return specific rows where player weights are 190 lbs and height > 190 */
SELECT
  *
FROM
  Player
WHERE
  weight=190 and height>190 ;

/* return specific rows where player weights are 190 lbs or height > 190 */
SELECT
  *
FROM
  Player
WHERE
  weight=190 or height>190 ;

/* return specific rows where text matches specific player_name */
SELECT
  *
FROM
  Player
WHERE
  player_name='Aaron Galindo' ;

/* return specific rows where text matches specific player_name */
SELECT
  *
FROM
  Player
WHERE
  player_name='Aaron Galindo' ;

/* return specific rows where text matches specific player_name beginning */
SELECT
  *
FROM
  Player
WHERE
  player_name like 'Aaron Galindo' ;

/* return specific rows where text matches specific player_name end with aaron*/
SELECT
  *
FROM
  Player
WHERE
  player_name like '%Aaron' ;

/* return specific rows where text matches specific player_name begins or ends with aaron*/
SELECT
  *
FROM
  Player
WHERE
  player_name like '%Aaron%' ;

/* return specific rows where text matches specific player_name begins with A and ends with n */
SELECT
  *
FROM
  Player
WHERE
  player_name like 'A%n' ;

/* return specific rows where text matches specific player_name begins with T and one character and then an m followed by anything*/
SELECT
  *
FROM
  Player
WHERE
  player_name like ‘T_m%' ;

/* return specific rows where text matches specific player_names Cristiano Ronaldo and Lionel Messi*/
SELECT
  *
FROM
  Player
WHERE
  player_name in (‘Cristiano Ronaldo’, ‘Lionel Messi’) ;

/* return specific rows where weight is between 180 and 190*/
SELECT
  *
FROM
  Player
WHERE
  Weight between 180 and 190 ;

/* return null values from Match table where home player 1 is null*/
SELECT
  *
FROM
  Match
WHERE
  home_player_1 is null; //opposite would be is not null

/* order player table by weight in asc order*/
SELECT
  *
FROM
  Player
  order by weight ; //opposite would be order by weight desc


/* join Player_Attributes table and Player table so that the player_api_id, date, overall_rating and player_names are included*/
SELECT
  Player_Attributes.player_api_id, 
  Player.player_name,
  Player_Attributes.date, 
  Player_Attributes.overall_rating
FROM
  Player_Attributes
  inner join Player on Player_Attributes.player_api_id=player.player_api_id ; 
							//=this is the common column
/* join Player_Attributes table and Player table so that the player_api_id, date, overall_rating and player_names are included but simplify the code by using aliases a for Player_Attributes and b for Player table*/
SELECT
 a.player_api_id, 
 b.player_name,
 a.date, 
 a.overall_rating
FROM
  Player_Attributes a
  inner join Player b on a.player_api_id=b.player_api_id ; 
							
/* join Player_Attributes table and Player table so that the player_api_id, date, overall_rating and player_names are included but simplify the code by using aliases a for Player_Attributes and b for Player table AND summarize the overall ratings while renaming it to ‘rating’ (remove date field and use group by to ensure the other columns are not affected)*/
SELECT
 a.player_api_id, 
 b.player_name,
 sum(a.overall_rating) as rating
FROM
  Player_Attributes a
  inner join Player b on a.player_api_id=b.player_api_id 
  group by  a.player_api_id, 
 b.player_name ; 

/* fix the previous query so that the ratings are avg and add a count of the rating then order the rating by descending*/
SELECT
 a.player_api_id, 
 b.player_name,
 avg(a.overall_rating) as rating,
 count(a.overall_rating) as rating_count
FROM
  Player_Attributes a
  inner join Player b on a.player_api_id=b.player_api_id 
  group by  a.player_api_id, 
 b.player_name 
order by rating desc ; 

/* filter the previous query using the having clause(only for numeric data)*/
SELECT
 a.player_api_id, 
 b.player_name,
 avg(a.overall_rating) AS rating,
 count(a.overall_rating) AS rating_count
FROM
  Player_Attributes a
 INNER JOIN Player b ON a.player_api_id=b.player_api_id 
 GROUP BY
 	a.player_api_id, 
b.player_name
 HAVING 
rating>85 
ORDER BY 
rating DESC ; 
